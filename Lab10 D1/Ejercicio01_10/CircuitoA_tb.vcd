$date
	Fri Nov 06 22:49:51 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb $end
$var wire 8 ! program_byte [7:0] $end
$var wire 4 " oprnd [3:0] $end
$var wire 4 # instr [3:0] $end
$var reg 1 $ clk $end
$var reg 1 % en_Fetch $end
$var reg 1 & en_PC $end
$var reg 1 ' loact $end
$var reg 12 ( load [11:0] $end
$var reg 1 ) reset $end
$scope module a $end
$var wire 1 $ clk $end
$var wire 1 % en_Fetch $end
$var wire 1 & en_PC $end
$var wire 1 ' loact $end
$var wire 12 * load [11:0] $end
$var wire 1 ) reset $end
$var wire 8 + program_byte [7:0] $end
$var wire 4 , oprnd [3:0] $end
$var wire 4 - instr [3:0] $end
$var wire 12 . cont [11:0] $end
$scope module a $end
$var wire 1 $ clk $end
$var wire 1 & enable $end
$var wire 1 ' loact $end
$var wire 12 / load [11:0] $end
$var wire 1 ) reset $end
$var reg 12 0 cont [11:0] $end
$upscope $end
$scope module b $end
$var wire 12 1 address [11:0] $end
$var wire 8 2 data [7:0] $end
$upscope $end
$scope module c $end
$var wire 8 3 D8 [7:0] $end
$var wire 1 % En $end
$var wire 1 $ clk $end
$var wire 1 ) reset $end
$var wire 4 4 Q8b [3:0] $end
$var wire 4 5 Q8a [3:0] $end
$scope module a $end
$var wire 4 6 D4 [3:0] $end
$var wire 1 % En $end
$var wire 1 $ clk $end
$var wire 1 ) reset $end
$var wire 4 7 Q4 [3:0] $end
$scope module a $end
$var wire 2 8 D2 [1:0] $end
$var wire 1 % En $end
$var wire 1 $ clk $end
$var wire 1 ) reset $end
$var wire 2 9 Q2 [1:0] $end
$scope module a $end
$var wire 1 : D $end
$var wire 1 % En $end
$var wire 1 $ clk $end
$var wire 1 ) reset $end
$var reg 1 ; Q $end
$upscope $end
$scope module b $end
$var wire 1 < D $end
$var wire 1 % En $end
$var wire 1 $ clk $end
$var wire 1 ) reset $end
$var reg 1 = Q $end
$upscope $end
$upscope $end
$scope module b $end
$var wire 2 > D2 [1:0] $end
$var wire 1 % En $end
$var wire 1 $ clk $end
$var wire 1 ) reset $end
$var wire 2 ? Q2 [1:0] $end
$scope module a $end
$var wire 1 @ D $end
$var wire 1 % En $end
$var wire 1 $ clk $end
$var wire 1 ) reset $end
$var reg 1 A Q $end
$upscope $end
$scope module b $end
$var wire 1 B D $end
$var wire 1 % En $end
$var wire 1 $ clk $end
$var wire 1 ) reset $end
$var reg 1 C Q $end
$upscope $end
$upscope $end
$upscope $end
$scope module b $end
$var wire 4 D D4 [3:0] $end
$var wire 1 % En $end
$var wire 1 $ clk $end
$var wire 1 ) reset $end
$var wire 4 E Q4 [3:0] $end
$scope module a $end
$var wire 2 F D2 [1:0] $end
$var wire 1 % En $end
$var wire 1 $ clk $end
$var wire 1 ) reset $end
$var wire 2 G Q2 [1:0] $end
$scope module a $end
$var wire 1 H D $end
$var wire 1 % En $end
$var wire 1 $ clk $end
$var wire 1 ) reset $end
$var reg 1 I Q $end
$upscope $end
$scope module b $end
$var wire 1 J D $end
$var wire 1 % En $end
$var wire 1 $ clk $end
$var wire 1 ) reset $end
$var reg 1 K Q $end
$upscope $end
$upscope $end
$scope module b $end
$var wire 2 L D2 [1:0] $end
$var wire 1 % En $end
$var wire 1 $ clk $end
$var wire 1 ) reset $end
$var wire 2 M Q2 [1:0] $end
$scope module a $end
$var wire 1 N D $end
$var wire 1 % En $end
$var wire 1 $ clk $end
$var wire 1 ) reset $end
$var reg 1 O Q $end
$upscope $end
$scope module b $end
$var wire 1 P D $end
$var wire 1 % En $end
$var wire 1 $ clk $end
$var wire 1 ) reset $end
$var reg 1 Q Q $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
xQ
xP
xO
xN
bx M
bx L
xK
xJ
xI
xH
bx G
bx F
bx E
bx D
xC
xB
xA
x@
bx ?
bx >
x=
x<
x;
x:
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
x)
bx (
x'
x&
x%
x$
bx #
bx "
bx !
$end
#1
1:
0<
1@
0B
1H
0J
1N
0P
b10 8
b10 >
b10 F
b10 L
b1010 6
b1010 D
b10101010 !
b10101010 +
b10101010 2
b10101010 3
b0 .
b0 0
b0 1
0;
b0 9
0=
0A
b0 #
b0 -
b0 5
b0 7
b0 ?
0C
0I
b0 G
0K
0O
b0 "
b0 ,
b0 4
b0 E
b0 M
0Q
b0 (
b0 *
b0 /
0'
0%
0&
1)
0$
#2
1$
#3
0$
1%
1&
0)
#4
1B
1P
b11 >
b11 L
b1011 6
b1011 D
b10111011 !
b10111011 +
b10111011 2
b10111011 3
b1 .
b1 0
b1 1
b10 9
1;
b1010 #
b1010 -
b1010 5
b1010 7
b10 ?
1A
b10 G
1I
b1010 "
b1010 ,
b1010 4
b1010 E
b10 M
1O
1$
#5
0$
#6
x:
x<
x@
xB
xH
xJ
xN
xP
bx 8
bx >
bx F
bx L
bx 6
bx D
bx !
bx +
bx 2
bx 3
b10 .
b10 0
b10 1
b1011 "
b1011 ,
b1011 4
b1011 E
b11 M
1Q
b1011 #
b1011 -
b1011 5
b1011 7
b11 ?
1C
1$
#7
0:
0<
0@
1B
1H
0J
0N
1P
b0 8
b1 >
b10 F
b1 L
b1 6
b1001 D
b11001 !
b11001 +
b11001 2
b11001 3
b10000 .
b10000 0
b10000 1
0$
b10000 (
b10000 *
b10000 /
1'
#8
b0 9
0;
b1 #
b1 -
b1 5
b1 7
b1 ?
0A
b1001 "
b1001 ,
b1001 4
b1001 E
b1 M
0O
1$
#9
0B
1N
0P
b0 >
b10 L
b0 6
b1010 D
b1010 !
b1010 +
b1010 2
b1010 3
b10001 .
b10001 0
b10001 1
0$
0'
#10
1B
0H
b1 >
b0 F
b1 6
b10 D
b10010 !
b10010 +
b10010 2
b10010 3
b10010 .
b10010 0
b10010 1
0Q
b1010 "
b1010 ,
b1010 4
b1010 E
b10 M
1O
b0 #
b0 -
b0 5
b0 7
b0 ?
0C
1$
#11
1:
1<
1@
1H
1J
1P
b11 8
b11 >
b11 F
b11 L
b1111 6
b1111 D
b11111111 !
b11111111 +
b11111111 2
b11111111 3
b100000000 .
b100000000 0
b100000000 1
0$
b100000000 (
b100000000 *
b100000000 /
1'
#12
1;
b11 9
1=
1A
b1111 #
b1111 -
b1111 5
b1111 7
b11 ?
1C
b11 G
1K
b1111 "
b1111 ,
b1111 4
b1111 E
b11 M
1Q
1$
#13
0$
#14
1$
#15
0$
